package main

import "fmt"

//go  单元测试概念

func main() {

	//传统的测试方法，就是在main函数中使用看看结果是否正确
	res := addUpper(10)
	if res != 55 {
		fmt.Printf("addUpper() 错误，返回值为 %v 期望值为%v\n", res, 55)
	} else {
		fmt.Printf("addUpper()正确，返回值为 %v 期望值为%v\n", res, 55)
	}
	// 传统测试代码 缺点：
	//1. 不方便，需要在main()中调用，需要去修改main() ，如果现在项目正在运行，就可能去停止项目
	//2. 不便于管理，因为当我们测试多个函数或者多个模块是，都需要写在main()，不利于我们管理和清晰思路
	//3.   因此 testing-->测试框架就是为了解决这个问题的

}

// 单元测试：  测试框架 testing  和自带go test 命令来实现单元测试以及性能测试，testing框架和其他语言的测试框架类似，可以基于这个框架写针对响应函数的测试用例，也可以基于改框架写压力测试
// 单元测试：  确保每个函数是可运行，并且运行结果是正确的
// 性能测试：  确保写出来的代码性能是好的
// 测试目的：  单元测试能及时发现程序设计或实现的逻辑错误，使得问题及早暴露，便于问题的定位解决，儿性能测试则重点在于发现程序设计上的一些问题，让程序能够在高并发的情况下还能保存稳定

//传统方式进行测试：
func addUpper(n int) int {
	res := 0
	for i := 0; i <= n; i++ {
		res += i
	}
	return res
}
