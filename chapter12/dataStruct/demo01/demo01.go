package main

func main() {

}

// 数据结构
//        数据结构是一门研究算法的学科，自从有了编程语言也就有了数据结构，学好数据结构可以编出更加漂亮，更加有效率的代码
//        要学习好数据结构就要多多考虑如何将生活中遇到的问题，用程序去实现解决
//        程序=数据结构+算法
//
//数据结构和算法的关系
//        算法是程序的灵魂

//  稀疏数组(sparseArray)
//              编写的五子棋程序中，有存盘退出和续上盘的功能。
//                  分析问题：
//                          因为改二维数组的很多值都是默认值为0,因此记录了很多没有意义的数据-->稀疏数组
//   当一个数组中大部分元素为0，或者为同一个一个值的数组时，可以使用稀疏数组来保存该数组。
//       稀疏数组的处理方法：
//                         1.记录数组一共有几行几列，有多少个不同的值
//                         1.把具有不同值的元素的行列及值记录再一个小规模的数组中，从而缩小程序的规模
//       应用实例：
//                1.使用稀疏数组，来保留类似前面的二维数组(棋盘、地图等等)
//                1.把稀疏数组存盘，并且可以重新恢复原来的二维数组
//                1.整体思路分析：
//                              1.定义一个稀疏数组为（row   col     value）
//
//
//      队列：
//            队列的一个使用场景： 银行排队的金典案例
//
//      队列介绍：
//              队列是一个有序列表，可以用数组或者链表实现。
//              遵循先入先出的原则，即：先存入队列的数据，要先取出，后存入的要后取出。
//                数组模拟队列：
//                            1.队列本身是有序列表，若使用数组的结构来存储队列的数据，则队列数组的声明如下： 其中maxSize是该队列的最大容量
//                            2.因为队列的输入、输出是分别从钱后端来处理，因此需要两个变量 front及rear分别记录队列前后端的下标，front会随着数据输出而改变，而rear则虽则数据输入而改变，
//                            思想思路：
//                                     1.当我们将数据存入队列时称为"addQueue",addQueue的处理需要两个步骤：
//                                         1.将尾指针往后移，rear+1, front==rear [队列为空]
//                                         2.若尾指针rear小于等于队列的最大下标maxSize-1,则将数据存入rear所指的数组元素中，否则无法存入数据，rear==maxSize-1 【队列满】
//                                                rear 是队列的最后[包含队列的元素]  front  是队列的最前元素 [不包含队列的元素]
//
//
//
//     链表
//            链表是有序的列表，但它在内存中不是连续存储的
//
//            单链表：
//                   1.单链表(带头节点)逻辑结构      head--->node01---->node02---->node03
//                        单链表的应用实例：
//                                       1.使用带head的单向链表实现 水浒英雄排行榜管理
//                                       2.完成对英雄人物的增删查改操作，
//
